// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/containers/image/v5/types"
	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockManifestInterface is a mock of ManifestInterface interface.
type MockManifestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManifestInterfaceMockRecorder
	isgomock struct{}
}

// MockManifestInterfaceMockRecorder is the mock recorder for MockManifestInterface.
type MockManifestInterfaceMockRecorder struct {
	mock *MockManifestInterface
}

// NewMockManifestInterface creates a new mock instance.
func NewMockManifestInterface(ctrl *gomock.Controller) *MockManifestInterface {
	mock := &MockManifestInterface{ctrl: ctrl}
	mock.recorder = &MockManifestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestInterface) EXPECT() *MockManifestInterfaceMockRecorder {
	return m.recorder
}

// ConvertIndexToSingleManifest mocks base method.
func (m *MockManifestInterface) ConvertIndexToSingleManifest(dir string, oci *v2alpha1.OCISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertIndexToSingleManifest", dir, oci)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertIndexToSingleManifest indicates an expected call of ConvertIndexToSingleManifest.
func (mr *MockManifestInterfaceMockRecorder) ConvertIndexToSingleManifest(dir, oci any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertIndexToSingleManifest", reflect.TypeOf((*MockManifestInterface)(nil).ConvertIndexToSingleManifest), dir, oci)
}

// ExtractLayersOCI mocks base method.
func (m *MockManifestInterface) ExtractLayersOCI(filePath, toPath, label string, oci *v2alpha1.OCISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractLayersOCI", filePath, toPath, label, oci)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractLayersOCI indicates an expected call of ExtractLayersOCI.
func (mr *MockManifestInterfaceMockRecorder) ExtractLayersOCI(filePath, toPath, label, oci any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractLayersOCI", reflect.TypeOf((*MockManifestInterface)(nil).ExtractLayersOCI), filePath, toPath, label, oci)
}

// GetDigest mocks base method.
func (m *MockManifestInterface) GetDigest(ctx context.Context, sourceCtx *types.SystemContext, imgRef string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigest", ctx, sourceCtx, imgRef)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigest indicates an expected call of GetDigest.
func (mr *MockManifestInterfaceMockRecorder) GetDigest(ctx, sourceCtx, imgRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigest", reflect.TypeOf((*MockManifestInterface)(nil).GetDigest), ctx, sourceCtx, imgRef)
}

// GetImageIndex mocks base method.
func (m *MockManifestInterface) GetImageIndex(dir string) (*v2alpha1.OCISchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageIndex", dir)
	ret0, _ := ret[0].(*v2alpha1.OCISchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageIndex indicates an expected call of GetImageIndex.
func (mr *MockManifestInterfaceMockRecorder) GetImageIndex(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageIndex", reflect.TypeOf((*MockManifestInterface)(nil).GetImageIndex), dir)
}

// GetImageManifest mocks base method.
func (m *MockManifestInterface) GetImageManifest(file string) (*v2alpha1.OCISchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageManifest", file)
	ret0, _ := ret[0].(*v2alpha1.OCISchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageManifest indicates an expected call of GetImageManifest.
func (mr *MockManifestInterfaceMockRecorder) GetImageManifest(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageManifest", reflect.TypeOf((*MockManifestInterface)(nil).GetImageManifest), file)
}

// GetOperatorConfig mocks base method.
func (m *MockManifestInterface) GetOperatorConfig(file string) (*v2alpha1.OperatorConfigSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorConfig", file)
	ret0, _ := ret[0].(*v2alpha1.OperatorConfigSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorConfig indicates an expected call of GetOperatorConfig.
func (mr *MockManifestInterfaceMockRecorder) GetOperatorConfig(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorConfig", reflect.TypeOf((*MockManifestInterface)(nil).GetOperatorConfig), file)
}

// GetReleaseSchema mocks base method.
func (m *MockManifestInterface) GetReleaseSchema(filePath string) ([]v2alpha1.RelatedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseSchema", filePath)
	ret0, _ := ret[0].([]v2alpha1.RelatedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseSchema indicates an expected call of GetReleaseSchema.
func (mr *MockManifestInterfaceMockRecorder) GetReleaseSchema(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseSchema", reflect.TypeOf((*MockManifestInterface)(nil).GetReleaseSchema), filePath)
}
