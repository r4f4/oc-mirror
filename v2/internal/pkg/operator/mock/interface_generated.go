// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	operator "github.com/openshift/oc-mirror/v2/internal/pkg/operator"
	declcfg "github.com/operator-framework/operator-registry/alpha/declcfg"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectorInterface is a mock of CollectorInterface interface.
type MockCollectorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorInterfaceMockRecorder
	isgomock struct{}
}

// MockCollectorInterfaceMockRecorder is the mock recorder for MockCollectorInterface.
type MockCollectorInterfaceMockRecorder struct {
	mock *MockCollectorInterface
}

// NewMockCollectorInterface creates a new mock instance.
func NewMockCollectorInterface(ctrl *gomock.Controller) *MockCollectorInterface {
	mock := &MockCollectorInterface{ctrl: ctrl}
	mock.recorder = &MockCollectorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorInterface) EXPECT() *MockCollectorInterfaceMockRecorder {
	return m.recorder
}

// OperatorImageCollector mocks base method.
func (m *MockCollectorInterface) OperatorImageCollector(ctx context.Context) (v2alpha1.CollectorSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorImageCollector", ctx)
	ret0, _ := ret[0].(v2alpha1.CollectorSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatorImageCollector indicates an expected call of OperatorImageCollector.
func (mr *MockCollectorInterfaceMockRecorder) OperatorImageCollector(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorImageCollector", reflect.TypeOf((*MockCollectorInterface)(nil).OperatorImageCollector), ctx)
}

// MockcatalogHandlerInterface is a mock of catalogHandlerInterface interface.
type MockcatalogHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockcatalogHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockcatalogHandlerInterfaceMockRecorder is the mock recorder for MockcatalogHandlerInterface.
type MockcatalogHandlerInterfaceMockRecorder struct {
	mock *MockcatalogHandlerInterface
}

// NewMockcatalogHandlerInterface creates a new mock instance.
func NewMockcatalogHandlerInterface(ctrl *gomock.Controller) *MockcatalogHandlerInterface {
	mock := &MockcatalogHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockcatalogHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcatalogHandlerInterface) EXPECT() *MockcatalogHandlerInterfaceMockRecorder {
	return m.recorder
}

// filterRelatedImagesFromCatalog mocks base method.
func (m *MockcatalogHandlerInterface) filterRelatedImagesFromCatalog(operatorCatalog operator.OperatorCatalog, ctlgInIsc v2alpha1.Operator, copyImageSchemaMap *v2alpha1.CopyImageSchemaMap) (map[string][]v2alpha1.RelatedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterRelatedImagesFromCatalog", operatorCatalog, ctlgInIsc, copyImageSchemaMap)
	ret0, _ := ret[0].(map[string][]v2alpha1.RelatedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// filterRelatedImagesFromCatalog indicates an expected call of filterRelatedImagesFromCatalog.
func (mr *MockcatalogHandlerInterfaceMockRecorder) filterRelatedImagesFromCatalog(operatorCatalog, ctlgInIsc, copyImageSchemaMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterRelatedImagesFromCatalog", reflect.TypeOf((*MockcatalogHandlerInterface)(nil).filterRelatedImagesFromCatalog), operatorCatalog, ctlgInIsc, copyImageSchemaMap)
}

// getCatalog mocks base method.
func (m *MockcatalogHandlerInterface) getCatalog(filePath string) (operator.OperatorCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCatalog", filePath)
	ret0, _ := ret[0].(operator.OperatorCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getCatalog indicates an expected call of getCatalog.
func (mr *MockcatalogHandlerInterfaceMockRecorder) getCatalog(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCatalog", reflect.TypeOf((*MockcatalogHandlerInterface)(nil).getCatalog), filePath)
}

// getDeclarativeConfig mocks base method.
func (m *MockcatalogHandlerInterface) getDeclarativeConfig(filePath string) (*declcfg.DeclarativeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDeclarativeConfig", filePath)
	ret0, _ := ret[0].(*declcfg.DeclarativeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getDeclarativeConfig indicates an expected call of getDeclarativeConfig.
func (mr *MockcatalogHandlerInterfaceMockRecorder) getDeclarativeConfig(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDeclarativeConfig", reflect.TypeOf((*MockcatalogHandlerInterface)(nil).getDeclarativeConfig), filePath)
}

// getRelatedImagesFromCatalog mocks base method.
func (m *MockcatalogHandlerInterface) getRelatedImagesFromCatalog(dc *declcfg.DeclarativeConfig, copyImageSchemaMap *v2alpha1.CopyImageSchemaMap) (map[string][]v2alpha1.RelatedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRelatedImagesFromCatalog", dc, copyImageSchemaMap)
	ret0, _ := ret[0].(map[string][]v2alpha1.RelatedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRelatedImagesFromCatalog indicates an expected call of getRelatedImagesFromCatalog.
func (mr *MockcatalogHandlerInterfaceMockRecorder) getRelatedImagesFromCatalog(dc, copyImageSchemaMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRelatedImagesFromCatalog", reflect.TypeOf((*MockcatalogHandlerInterface)(nil).getRelatedImagesFromCatalog), dc, copyImageSchemaMap)
}

// MockimageDispatcher is a mock of imageDispatcher interface.
type MockimageDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockimageDispatcherMockRecorder
	isgomock struct{}
}

// MockimageDispatcherMockRecorder is the mock recorder for MockimageDispatcher.
type MockimageDispatcherMockRecorder struct {
	mock *MockimageDispatcher
}

// NewMockimageDispatcher creates a new mock instance.
func NewMockimageDispatcher(ctrl *gomock.Controller) *MockimageDispatcher {
	mock := &MockimageDispatcher{ctrl: ctrl}
	mock.recorder = &MockimageDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockimageDispatcher) EXPECT() *MockimageDispatcherMockRecorder {
	return m.recorder
}

// dispatch mocks base method.
func (m *MockimageDispatcher) dispatch(image v2alpha1.RelatedImage) ([]v2alpha1.CopyImageSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatch", image)
	ret0, _ := ret[0].([]v2alpha1.CopyImageSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// dispatch indicates an expected call of dispatch.
func (mr *MockimageDispatcherMockRecorder) dispatch(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatch", reflect.TypeOf((*MockimageDispatcher)(nil).dispatch), image)
}
