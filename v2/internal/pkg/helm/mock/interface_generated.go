// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectorInterface is a mock of CollectorInterface interface.
type MockCollectorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorInterfaceMockRecorder
	isgomock struct{}
}

// MockCollectorInterfaceMockRecorder is the mock recorder for MockCollectorInterface.
type MockCollectorInterfaceMockRecorder struct {
	mock *MockCollectorInterface
}

// NewMockCollectorInterface creates a new mock instance.
func NewMockCollectorInterface(ctrl *gomock.Controller) *MockCollectorInterface {
	mock := &MockCollectorInterface{ctrl: ctrl}
	mock.recorder = &MockCollectorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorInterface) EXPECT() *MockCollectorInterfaceMockRecorder {
	return m.recorder
}

// HelmImageCollector mocks base method.
func (m *MockCollectorInterface) HelmImageCollector(ctx context.Context) ([]v2alpha1.CopyImageSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelmImageCollector", ctx)
	ret0, _ := ret[0].([]v2alpha1.CopyImageSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelmImageCollector indicates an expected call of HelmImageCollector.
func (mr *MockCollectorInterfaceMockRecorder) HelmImageCollector(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelmImageCollector", reflect.TypeOf((*MockCollectorInterface)(nil).HelmImageCollector), ctx)
}

// MockindexDownloader is a mock of indexDownloader interface.
type MockindexDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockindexDownloaderMockRecorder
	isgomock struct{}
}

// MockindexDownloaderMockRecorder is the mock recorder for MockindexDownloader.
type MockindexDownloaderMockRecorder struct {
	mock *MockindexDownloader
}

// NewMockindexDownloader creates a new mock instance.
func NewMockindexDownloader(ctrl *gomock.Controller) *MockindexDownloader {
	mock := &MockindexDownloader{ctrl: ctrl}
	mock.recorder = &MockindexDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockindexDownloader) EXPECT() *MockindexDownloaderMockRecorder {
	return m.recorder
}

// DownloadIndexFile mocks base method.
func (m *MockindexDownloader) DownloadIndexFile() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadIndexFile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadIndexFile indicates an expected call of DownloadIndexFile.
func (mr *MockindexDownloaderMockRecorder) DownloadIndexFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadIndexFile", reflect.TypeOf((*MockindexDownloader)(nil).DownloadIndexFile))
}

// MockchartDownloader is a mock of chartDownloader interface.
type MockchartDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockchartDownloaderMockRecorder
	isgomock struct{}
}

// MockchartDownloaderMockRecorder is the mock recorder for MockchartDownloader.
type MockchartDownloaderMockRecorder struct {
	mock *MockchartDownloader
}

// NewMockchartDownloader creates a new mock instance.
func NewMockchartDownloader(ctrl *gomock.Controller) *MockchartDownloader {
	mock := &MockchartDownloader{ctrl: ctrl}
	mock.recorder = &MockchartDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchartDownloader) EXPECT() *MockchartDownloaderMockRecorder {
	return m.recorder
}

// DownloadTo mocks base method.
func (m *MockchartDownloader) DownloadTo(ref, version, dest string) (string, any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTo", ref, version, dest)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadTo indicates an expected call of DownloadTo.
func (mr *MockchartDownloaderMockRecorder) DownloadTo(ref, version, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTo", reflect.TypeOf((*MockchartDownloader)(nil).DownloadTo), ref, version, dest)
}

// MockwebClient is a mock of webClient interface.
type MockwebClient struct {
	ctrl     *gomock.Controller
	recorder *MockwebClientMockRecorder
	isgomock struct{}
}

// MockwebClientMockRecorder is the mock recorder for MockwebClient.
type MockwebClientMockRecorder struct {
	mock *MockwebClient
}

// NewMockwebClient creates a new mock instance.
func NewMockwebClient(ctrl *gomock.Controller) *MockwebClient {
	mock := &MockwebClient{ctrl: ctrl}
	mock.recorder = &MockwebClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwebClient) EXPECT() *MockwebClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockwebClient) Get(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockwebClientMockRecorder) Get(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockwebClient)(nil).Get), url)
}
