// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockGeneratorInterface is a mock of GeneratorInterface interface.
type MockGeneratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorInterfaceMockRecorder
	isgomock struct{}
}

// MockGeneratorInterfaceMockRecorder is the mock recorder for MockGeneratorInterface.
type MockGeneratorInterfaceMockRecorder struct {
	mock *MockGeneratorInterface
}

// NewMockGeneratorInterface creates a new mock instance.
func NewMockGeneratorInterface(ctrl *gomock.Controller) *MockGeneratorInterface {
	mock := &MockGeneratorInterface{ctrl: ctrl}
	mock.recorder = &MockGeneratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneratorInterface) EXPECT() *MockGeneratorInterfaceMockRecorder {
	return m.recorder
}

// CatalogSourceGenerator mocks base method.
func (m *MockGeneratorInterface) CatalogSourceGenerator(allRelatedImages []v2alpha1.CopyImageSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CatalogSourceGenerator", allRelatedImages)
	ret0, _ := ret[0].(error)
	return ret0
}

// CatalogSourceGenerator indicates an expected call of CatalogSourceGenerator.
func (mr *MockGeneratorInterfaceMockRecorder) CatalogSourceGenerator(allRelatedImages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogSourceGenerator", reflect.TypeOf((*MockGeneratorInterface)(nil).CatalogSourceGenerator), allRelatedImages)
}

// ClusterCatalogGenerator mocks base method.
func (m *MockGeneratorInterface) ClusterCatalogGenerator(allRelatedImages []v2alpha1.CopyImageSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCatalogGenerator", allRelatedImages)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClusterCatalogGenerator indicates an expected call of ClusterCatalogGenerator.
func (mr *MockGeneratorInterfaceMockRecorder) ClusterCatalogGenerator(allRelatedImages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCatalogGenerator", reflect.TypeOf((*MockGeneratorInterface)(nil).ClusterCatalogGenerator), allRelatedImages)
}

// GenerateSignatureConfigMap mocks base method.
func (m *MockGeneratorInterface) GenerateSignatureConfigMap(allRelatedImages []v2alpha1.CopyImageSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignatureConfigMap", allRelatedImages)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSignatureConfigMap indicates an expected call of GenerateSignatureConfigMap.
func (mr *MockGeneratorInterfaceMockRecorder) GenerateSignatureConfigMap(allRelatedImages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignatureConfigMap", reflect.TypeOf((*MockGeneratorInterface)(nil).GenerateSignatureConfigMap), allRelatedImages)
}

// IDMS_ITMSGenerator mocks base method.
func (m *MockGeneratorInterface) IDMS_ITMSGenerator(allRelatedImages []v2alpha1.CopyImageSchema, forceRepositoryScope bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDMS_ITMSGenerator", allRelatedImages, forceRepositoryScope)
	ret0, _ := ret[0].(error)
	return ret0
}

// IDMS_ITMSGenerator indicates an expected call of IDMS_ITMSGenerator.
func (mr *MockGeneratorInterfaceMockRecorder) IDMS_ITMSGenerator(allRelatedImages, forceRepositoryScope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDMS_ITMSGenerator", reflect.TypeOf((*MockGeneratorInterface)(nil).IDMS_ITMSGenerator), allRelatedImages, forceRepositoryScope)
}

// UpdateServiceGenerator mocks base method.
func (m *MockGeneratorInterface) UpdateServiceGenerator(graphImage, releaseImage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceGenerator", graphImage, releaseImage)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceGenerator indicates an expected call of UpdateServiceGenerator.
func (mr *MockGeneratorInterfaceMockRecorder) UpdateServiceGenerator(graphImage, releaseImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceGenerator", reflect.TypeOf((*MockGeneratorInterface)(nil).UpdateServiceGenerator), graphImage, releaseImage)
}
