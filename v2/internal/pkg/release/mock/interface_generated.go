// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectorInterface is a mock of CollectorInterface interface.
type MockCollectorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorInterfaceMockRecorder
	isgomock struct{}
}

// MockCollectorInterfaceMockRecorder is the mock recorder for MockCollectorInterface.
type MockCollectorInterfaceMockRecorder struct {
	mock *MockCollectorInterface
}

// NewMockCollectorInterface creates a new mock instance.
func NewMockCollectorInterface(ctrl *gomock.Controller) *MockCollectorInterface {
	mock := &MockCollectorInterface{ctrl: ctrl}
	mock.recorder = &MockCollectorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorInterface) EXPECT() *MockCollectorInterfaceMockRecorder {
	return m.recorder
}

// GraphImage mocks base method.
func (m *MockCollectorInterface) GraphImage() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphImage")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GraphImage indicates an expected call of GraphImage.
func (mr *MockCollectorInterfaceMockRecorder) GraphImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphImage", reflect.TypeOf((*MockCollectorInterface)(nil).GraphImage))
}

// ReleaseImage mocks base method.
func (m *MockCollectorInterface) ReleaseImage(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseImage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseImage indicates an expected call of ReleaseImage.
func (mr *MockCollectorInterfaceMockRecorder) ReleaseImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseImage", reflect.TypeOf((*MockCollectorInterface)(nil).ReleaseImage), arg0)
}

// ReleaseImageCollector mocks base method.
func (m *MockCollectorInterface) ReleaseImageCollector(ctx context.Context) ([]v2alpha1.CopyImageSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseImageCollector", ctx)
	ret0, _ := ret[0].([]v2alpha1.CopyImageSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseImageCollector indicates an expected call of ReleaseImageCollector.
func (mr *MockCollectorInterfaceMockRecorder) ReleaseImageCollector(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseImageCollector", reflect.TypeOf((*MockCollectorInterface)(nil).ReleaseImageCollector), ctx)
}

// MockGraphBuilderInterface is a mock of GraphBuilderInterface interface.
type MockGraphBuilderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGraphBuilderInterfaceMockRecorder
	isgomock struct{}
}

// MockGraphBuilderInterfaceMockRecorder is the mock recorder for MockGraphBuilderInterface.
type MockGraphBuilderInterfaceMockRecorder struct {
	mock *MockGraphBuilderInterface
}

// NewMockGraphBuilderInterface creates a new mock instance.
func NewMockGraphBuilderInterface(ctrl *gomock.Controller) *MockGraphBuilderInterface {
	mock := &MockGraphBuilderInterface{ctrl: ctrl}
	mock.recorder = &MockGraphBuilderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphBuilderInterface) EXPECT() *MockGraphBuilderInterfaceMockRecorder {
	return m.recorder
}

// CreateGraphImage mocks base method.
func (m *MockGraphBuilderInterface) CreateGraphImage(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphImage", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphImage indicates an expected call of CreateGraphImage.
func (mr *MockGraphBuilderInterfaceMockRecorder) CreateGraphImage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphImage", reflect.TypeOf((*MockGraphBuilderInterface)(nil).CreateGraphImage), ctx)
}

// MockCincinnatiInterface is a mock of CincinnatiInterface interface.
type MockCincinnatiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCincinnatiInterfaceMockRecorder
	isgomock struct{}
}

// MockCincinnatiInterfaceMockRecorder is the mock recorder for MockCincinnatiInterface.
type MockCincinnatiInterfaceMockRecorder struct {
	mock *MockCincinnatiInterface
}

// NewMockCincinnatiInterface creates a new mock instance.
func NewMockCincinnatiInterface(ctrl *gomock.Controller) *MockCincinnatiInterface {
	mock := &MockCincinnatiInterface{ctrl: ctrl}
	mock.recorder = &MockCincinnatiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCincinnatiInterface) EXPECT() *MockCincinnatiInterfaceMockRecorder {
	return m.recorder
}

// GetReleaseReferenceImages mocks base method.
func (m *MockCincinnatiInterface) GetReleaseReferenceImages(arg0 context.Context) ([]v2alpha1.CopyImageSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseReferenceImages", arg0)
	ret0, _ := ret[0].([]v2alpha1.CopyImageSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseReferenceImages indicates an expected call of GetReleaseReferenceImages.
func (mr *MockCincinnatiInterfaceMockRecorder) GetReleaseReferenceImages(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseReferenceImages", reflect.TypeOf((*MockCincinnatiInterface)(nil).GetReleaseReferenceImages), arg0)
}

// MockSignatureInterface is a mock of SignatureInterface interface.
type MockSignatureInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureInterfaceMockRecorder
	isgomock struct{}
}

// MockSignatureInterfaceMockRecorder is the mock recorder for MockSignatureInterface.
type MockSignatureInterfaceMockRecorder struct {
	mock *MockSignatureInterface
}

// NewMockSignatureInterface creates a new mock instance.
func NewMockSignatureInterface(ctrl *gomock.Controller) *MockSignatureInterface {
	mock := &MockSignatureInterface{ctrl: ctrl}
	mock.recorder = &MockSignatureInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureInterface) EXPECT() *MockSignatureInterfaceMockRecorder {
	return m.recorder
}

// GenerateReleaseSignatures mocks base method.
func (m *MockSignatureInterface) GenerateReleaseSignatures(arg0 context.Context, arg1 []v2alpha1.CopyImageSchema) ([]v2alpha1.CopyImageSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReleaseSignatures", arg0, arg1)
	ret0, _ := ret[0].([]v2alpha1.CopyImageSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReleaseSignatures indicates an expected call of GenerateReleaseSignatures.
func (mr *MockSignatureInterfaceMockRecorder) GenerateReleaseSignatures(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReleaseSignatures", reflect.TypeOf((*MockSignatureInterface)(nil).GenerateReleaseSignatures), arg0, arg1)
}
