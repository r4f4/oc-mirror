// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	mirror "github.com/openshift/oc-mirror/v2/internal/pkg/mirror"
	gomock "go.uber.org/mock/gomock"
)

// MockBatchInterface is a mock of BatchInterface interface.
type MockBatchInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBatchInterfaceMockRecorder
	isgomock struct{}
}

// MockBatchInterfaceMockRecorder is the mock recorder for MockBatchInterface.
type MockBatchInterfaceMockRecorder struct {
	mock *MockBatchInterface
}

// NewMockBatchInterface creates a new mock instance.
func NewMockBatchInterface(ctrl *gomock.Controller) *MockBatchInterface {
	mock := &MockBatchInterface{ctrl: ctrl}
	mock.recorder = &MockBatchInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchInterface) EXPECT() *MockBatchInterfaceMockRecorder {
	return m.recorder
}

// Worker mocks base method.
func (m *MockBatchInterface) Worker(ctx context.Context, collectorSchema v2alpha1.CollectorSchema, opts mirror.CopyOptions) (v2alpha1.CollectorSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worker", ctx, collectorSchema, opts)
	ret0, _ := ret[0].(v2alpha1.CollectorSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worker indicates an expected call of Worker.
func (mr *MockBatchInterfaceMockRecorder) Worker(ctx, collectorSchema, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worker", reflect.TypeOf((*MockBatchInterface)(nil).Worker), ctx, collectorSchema, opts)
}
