// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockBlobsGatherer is a mock of BlobsGatherer interface.
type MockBlobsGatherer struct {
	ctrl     *gomock.Controller
	recorder *MockBlobsGathererMockRecorder
	isgomock struct{}
}

// MockBlobsGathererMockRecorder is the mock recorder for MockBlobsGatherer.
type MockBlobsGathererMockRecorder struct {
	mock *MockBlobsGatherer
}

// NewMockBlobsGatherer creates a new mock instance.
func NewMockBlobsGatherer(ctrl *gomock.Controller) *MockBlobsGatherer {
	mock := &MockBlobsGatherer{ctrl: ctrl}
	mock.recorder = &MockBlobsGathererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobsGatherer) EXPECT() *MockBlobsGathererMockRecorder {
	return m.recorder
}

// GatherBlobs mocks base method.
func (m *MockBlobsGatherer) GatherBlobs(ctx context.Context, imgRef string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherBlobs", ctx, imgRef)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherBlobs indicates an expected call of GatherBlobs.
func (mr *MockBlobsGathererMockRecorder) GatherBlobs(ctx, imgRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherBlobs", reflect.TypeOf((*MockBlobsGatherer)(nil).GatherBlobs), ctx, imgRef)
}

// MockArchiver is a mock of Archiver interface.
type MockArchiver struct {
	ctrl     *gomock.Controller
	recorder *MockArchiverMockRecorder
	isgomock struct{}
}

// MockArchiverMockRecorder is the mock recorder for MockArchiver.
type MockArchiverMockRecorder struct {
	mock *MockArchiver
}

// NewMockArchiver creates a new mock instance.
func NewMockArchiver(ctrl *gomock.Controller) *MockArchiver {
	mock := &MockArchiver{ctrl: ctrl}
	mock.recorder = &MockArchiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiver) EXPECT() *MockArchiverMockRecorder {
	return m.recorder
}

// BuildArchive mocks base method.
func (m *MockArchiver) BuildArchive(ctx context.Context, collectedImages []v2alpha1.CopyImageSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildArchive", ctx, collectedImages)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildArchive indicates an expected call of BuildArchive.
func (mr *MockArchiverMockRecorder) BuildArchive(ctx, collectedImages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildArchive", reflect.TypeOf((*MockArchiver)(nil).BuildArchive), ctx, collectedImages)
}

// MockUnArchiver is a mock of UnArchiver interface.
type MockUnArchiver struct {
	ctrl     *gomock.Controller
	recorder *MockUnArchiverMockRecorder
	isgomock struct{}
}

// MockUnArchiverMockRecorder is the mock recorder for MockUnArchiver.
type MockUnArchiverMockRecorder struct {
	mock *MockUnArchiver
}

// NewMockUnArchiver creates a new mock instance.
func NewMockUnArchiver(ctrl *gomock.Controller) *MockUnArchiver {
	mock := &MockUnArchiver{ctrl: ctrl}
	mock.recorder = &MockUnArchiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnArchiver) EXPECT() *MockUnArchiverMockRecorder {
	return m.recorder
}

// Unarchive mocks base method.
func (m *MockUnArchiver) Unarchive() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unarchive")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unarchive indicates an expected call of Unarchive.
func (mr *MockUnArchiverMockRecorder) Unarchive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockUnArchiver)(nil).Unarchive))
}

// MockarchiveAdder is a mock of archiveAdder interface.
type MockarchiveAdder struct {
	ctrl     *gomock.Controller
	recorder *MockarchiveAdderMockRecorder
	isgomock struct{}
}

// MockarchiveAdderMockRecorder is the mock recorder for MockarchiveAdder.
type MockarchiveAdderMockRecorder struct {
	mock *MockarchiveAdder
}

// NewMockarchiveAdder creates a new mock instance.
func NewMockarchiveAdder(ctrl *gomock.Controller) *MockarchiveAdder {
	mock := &MockarchiveAdder{ctrl: ctrl}
	mock.recorder = &MockarchiveAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockarchiveAdder) EXPECT() *MockarchiveAdderMockRecorder {
	return m.recorder
}

// addAllFolder mocks base method.
func (m *MockarchiveAdder) addAllFolder(folderToAdd, relativeTo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addAllFolder", folderToAdd, relativeTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// addAllFolder indicates an expected call of addAllFolder.
func (mr *MockarchiveAdderMockRecorder) addAllFolder(folderToAdd, relativeTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addAllFolder", reflect.TypeOf((*MockarchiveAdder)(nil).addAllFolder), folderToAdd, relativeTo)
}

// addFile mocks base method.
func (m *MockarchiveAdder) addFile(pathToFile, pathInTar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addFile", pathToFile, pathInTar)
	ret0, _ := ret[0].(error)
	return ret0
}

// addFile indicates an expected call of addFile.
func (mr *MockarchiveAdderMockRecorder) addFile(pathToFile, pathInTar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFile", reflect.TypeOf((*MockarchiveAdder)(nil).addFile), pathToFile, pathInTar)
}

// close mocks base method.
func (m *MockarchiveAdder) close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "close")
	ret0, _ := ret[0].(error)
	return ret0
}

// close indicates an expected call of close.
func (mr *MockarchiveAdderMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockarchiveAdder)(nil).close))
}
