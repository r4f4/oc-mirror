// Code generated by MockGen. DO NOT EDIT.
// Source: ./mirror.go
//
// Generated by this command:
//
//	mockgen -source=./mirror.go -destination=./mock/mirror_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	copy "github.com/containers/image/v5/copy"
	signature "github.com/containers/image/v5/signature"
	types "github.com/containers/image/v5/types"
	mirror "github.com/openshift/oc-mirror/v2/internal/pkg/mirror"
	gomock "go.uber.org/mock/gomock"
)

// MockMirrorInterface is a mock of MirrorInterface interface.
type MockMirrorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorInterfaceMockRecorder
	isgomock struct{}
}

// MockMirrorInterfaceMockRecorder is the mock recorder for MockMirrorInterface.
type MockMirrorInterfaceMockRecorder struct {
	mock *MockMirrorInterface
}

// NewMockMirrorInterface creates a new mock instance.
func NewMockMirrorInterface(ctrl *gomock.Controller) *MockMirrorInterface {
	mock := &MockMirrorInterface{ctrl: ctrl}
	mock.recorder = &MockMirrorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorInterface) EXPECT() *MockMirrorInterfaceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockMirrorInterface) Check(ctx context.Context, image string, opts *mirror.CopyOptions, asCopySrc bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, image, opts, asCopySrc)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockMirrorInterfaceMockRecorder) Check(ctx, image, opts, asCopySrc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockMirrorInterface)(nil).Check), ctx, image, opts, asCopySrc)
}

// Run mocks base method.
func (m *MockMirrorInterface) Run(ctx context.Context, src, dest string, mode mirror.Mode, opts *mirror.CopyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, src, dest, mode, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockMirrorInterfaceMockRecorder) Run(ctx, src, dest, mode, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMirrorInterface)(nil).Run), ctx, src, dest, mode, opts)
}

// MockMirrorCopyInterface is a mock of MirrorCopyInterface interface.
type MockMirrorCopyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorCopyInterfaceMockRecorder
	isgomock struct{}
}

// MockMirrorCopyInterfaceMockRecorder is the mock recorder for MockMirrorCopyInterface.
type MockMirrorCopyInterfaceMockRecorder struct {
	mock *MockMirrorCopyInterface
}

// NewMockMirrorCopyInterface creates a new mock instance.
func NewMockMirrorCopyInterface(ctrl *gomock.Controller) *MockMirrorCopyInterface {
	mock := &MockMirrorCopyInterface{ctrl: ctrl}
	mock.recorder = &MockMirrorCopyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorCopyInterface) EXPECT() *MockMirrorCopyInterfaceMockRecorder {
	return m.recorder
}

// CopyImage mocks base method.
func (m *MockMirrorCopyInterface) CopyImage(ctx context.Context, pc *signature.PolicyContext, destRef, srcRef types.ImageReference, opts *copy.Options) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", ctx, pc, destRef, srcRef, opts)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage.
func (mr *MockMirrorCopyInterfaceMockRecorder) CopyImage(ctx, pc, destRef, srcRef, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockMirrorCopyInterface)(nil).CopyImage), ctx, pc, destRef, srcRef, opts)
}

// MockMirrorDeleteInterface is a mock of MirrorDeleteInterface interface.
type MockMirrorDeleteInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorDeleteInterfaceMockRecorder
	isgomock struct{}
}

// MockMirrorDeleteInterfaceMockRecorder is the mock recorder for MockMirrorDeleteInterface.
type MockMirrorDeleteInterfaceMockRecorder struct {
	mock *MockMirrorDeleteInterface
}

// NewMockMirrorDeleteInterface creates a new mock instance.
func NewMockMirrorDeleteInterface(ctrl *gomock.Controller) *MockMirrorDeleteInterface {
	mock := &MockMirrorDeleteInterface{ctrl: ctrl}
	mock.recorder = &MockMirrorDeleteInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorDeleteInterface) EXPECT() *MockMirrorDeleteInterfaceMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method.
func (m *MockMirrorDeleteInterface) DeleteImage(ctx context.Context, image string, opts *mirror.CopyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, image, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockMirrorDeleteInterfaceMockRecorder) DeleteImage(ctx, image, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockMirrorDeleteInterface)(nil).DeleteImage), ctx, image, opts)
}
